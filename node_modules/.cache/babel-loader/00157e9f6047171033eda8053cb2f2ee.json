{"ast":null,"code":"import _slicedToArray from\"/Users/stevo/Desktop/UCLA-HomeWork/React Porfolio/React-Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import'./Contact.css';// Here we import a helper function that will check if the email is valid\nimport{checkPassword,validateEmail}from'../../../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Form(){// Create state variables for the fields in the form\n// We are also setting their initial values to an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),userName=_useState4[0],setUserName=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),password=_useState6[0],setPassword=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),errorMessage=_useState8[0],setErrorMessage=_useState8[1];var handleInputChange=function handleInputChange(e){// Getting the value and name of the input which triggered the change\nvar target=e.target;var inputType=target.name;var inputValue=target.value;// Based on the input type, we set the state of either email, username, and password\nif(inputType==='email'){setEmail(inputValue);}else if(inputType==='userName'){setUserName(inputValue);}else{setPassword(inputValue);}};var handleFormSubmit=function handleFormSubmit(e){// Preventing the default behavior of the form submit (which is to refresh the page)\ne.preventDefault();// First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\nif(!validateEmail(email)||!userName){setErrorMessage('Email or username is invalid');// We want to exit out of this code block if something is wrong so that the user can correct it\nreturn;// Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n}if(!checkPassword(password)){setErrorMessage(\"Choose a more secure password for the account: \".concat(userName));return;}alert(\"Hello \".concat(userName));// If everything goes according to plan, we want to clear out the input after a successful registration.\nsetUserName('');setPassword('');setEmail('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"contactForm\",children:[/*#__PURE__*/_jsx(\"p\",{children:\" Contact Me Here:\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"form\",{className:\"form\",children:[/*#__PURE__*/_jsx(\"input\",{value:email,name:\"email\",onChange:handleInputChange,type:\"email\",placeholder:\"Email\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{value:userName,name:\"userName\",onChange:handleInputChange,type:\"text\",placeholder:\"Username\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{value:password,name:\"password\",onChange:handleInputChange,type:\"password\",placeholder:\"Password\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleFormSubmit,children:\"Submit\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})})]});}export default Form;","map":{"version":3,"names":["React","useState","checkPassword","validateEmail","Form","email","setEmail","userName","setUserName","password","setPassword","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","handleFormSubmit","preventDefault","alert"],"sources":["/Users/stevo/Desktop/UCLA-HomeWork/React Porfolio/React-Portfolio/src/components/pages/Contact/Index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Contact.css';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../../../utils/helpers';\n\nfunction Form() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'userName') {\n      setUserName(inputValue);\n    } else {\n      setPassword(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n    if (!validateEmail(email) || !userName) {\n      setErrorMessage('Email or username is invalid');\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n    if (!checkPassword(password)) {\n      setErrorMessage(\n        `Choose a more secure password for the account: ${userName}`\n      );\n      return;\n    }\n    alert(`Hello ${userName}`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setUserName('');\n    setPassword('');\n    setEmail('');\n  };\n\n  return (\n    <div className='contactForm'>\n      <p> Contact Me Here:</p>\n      < hr />\n      <form className=\"form\">\n        <input\n          value={email}\n          name=\"email\"\n          onChange={handleInputChange}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        < br />\n        <input\n          value={userName}\n          name=\"userName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"Username\"\n        />\n        < br />\n        <input\n          value={password}\n          name=\"password\"\n          onChange={handleInputChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        < br />\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n"],"mappings":"uJAAA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,eAAe,CAEtB;AACA,OAASC,aAAa,CAAEC,aAAa,KAAQ,wBAAwB,CAAC,wFAEtE,QAASC,KAAI,EAAG,CACd;AACA;AACA,cAA0BH,QAAQ,CAAC,EAAE,CAAC,wCAA/BI,KAAK,eAAEC,QAAQ,eACtB,eAAgCL,QAAQ,CAAC,EAAE,CAAC,yCAArCM,QAAQ,eAAEC,WAAW,eAC5B,eAAgCP,QAAQ,CAAC,EAAE,CAAC,yCAArCQ,QAAQ,eAAEC,WAAW,eAC5B,eAAwCT,QAAQ,CAAC,EAAE,CAAC,yCAA7CU,YAAY,eAAEC,eAAe,eAEpC,GAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIC,CAAC,CAAK,CAC/B;AACA,GAAQC,OAAM,CAAKD,CAAC,CAAZC,MAAM,CACd,GAAMC,UAAS,CAAGD,MAAM,CAACE,IAAI,CAC7B,GAAMC,WAAU,CAAGH,MAAM,CAACI,KAAK,CAE/B;AACA,GAAIH,SAAS,GAAK,OAAO,CAAE,CACzBV,QAAQ,CAACY,UAAU,CAAC,CACtB,CAAC,IAAM,IAAIF,SAAS,GAAK,UAAU,CAAE,CACnCR,WAAW,CAACU,UAAU,CAAC,CACzB,CAAC,IAAM,CACLR,WAAW,CAACQ,UAAU,CAAC,CACzB,CACF,CAAC,CAED,GAAME,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIN,CAAC,CAAK,CAC9B;AACAA,CAAC,CAACO,cAAc,EAAE,CAElB;AACA,GAAI,CAAClB,aAAa,CAACE,KAAK,CAAC,EAAI,CAACE,QAAQ,CAAE,CACtCK,eAAe,CAAC,8BAA8B,CAAC,CAC/C;AACA,OACA;AACF,CACA,GAAI,CAACV,aAAa,CAACO,QAAQ,CAAC,CAAE,CAC5BG,eAAe,0DACqCL,QAAQ,EAC3D,CACD,OACF,CACAe,KAAK,iBAAUf,QAAQ,EAAG,CAE1B;AACAC,WAAW,CAAC,EAAE,CAAC,CACfE,WAAW,CAAC,EAAE,CAAC,CACfJ,QAAQ,CAAC,EAAE,CAAC,CACd,CAAC,CAED,mBACE,aAAK,SAAS,CAAC,aAAa,wBAC1B,wCAAwB,cACxB,aAAO,cACP,cAAM,SAAS,CAAC,MAAM,wBACpB,cACE,KAAK,CAAED,KAAM,CACb,IAAI,CAAC,OAAO,CACZ,QAAQ,CAAEQ,iBAAkB,CAC5B,IAAI,CAAC,OAAO,CACZ,WAAW,CAAC,OAAO,EACnB,cACF,aAAO,cACP,cACE,KAAK,CAAEN,QAAS,CAChB,IAAI,CAAC,UAAU,CACf,QAAQ,CAAEM,iBAAkB,CAC5B,IAAI,CAAC,MAAM,CACX,WAAW,CAAC,UAAU,EACtB,cACF,aAAO,cACP,cACE,KAAK,CAAEJ,QAAS,CAChB,IAAI,CAAC,UAAU,CACf,QAAQ,CAAEI,iBAAkB,CAC5B,IAAI,CAAC,UAAU,CACf,WAAW,CAAC,UAAU,EACtB,cACF,aAAO,cACP,eAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAEO,gBAAiB,oBAAgB,GAC3D,CACNT,YAAY,eACX,kCACE,UAAG,SAAS,CAAC,YAAY,UAAEA,YAAY,EAAK,EAE/C,GACG,CAEV,CAEA,cAAeP,KAAI"},"metadata":{},"sourceType":"module"}